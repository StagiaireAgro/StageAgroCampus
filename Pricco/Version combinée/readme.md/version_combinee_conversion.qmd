```{r}
convert_kg <- function(data, num_unit, num_qt, tx_kg){
      
      t1 <- Sys.time()
      
      data[[num_unit]] <- as.factor(data[[num_unit]])
      levels(data[[num_unit]]) <- 1:length(levels(data[[num_unit]])) # on transorme les facteur en niveau 1:n
      
      convert_unit <- tx_kg[seq(1,length(tx_kg), by = 2)] #On selectionne la bonne convertion pour chaque observation grace au facteur
      vecteur_convert <- convert_unit[data[[num_unit]]]   #On fait le vecteur de convertion pour chaque observation
      
      data$poidsenkg <- data[[num_qt]]/vecteur_convert #
      
      data_NaN <- data[is.nan(data$poidsenkg),] 
      
      data_conv <- data[!(is.nan(data$poidsenkg)),]
      
      t2 <- Sys.time()
      
      t <- t2-t1
      
      return(list(data_conv,data_NaN,t)) 

}

convert_non_calc <- function(data, num_name, num_qt, tx_kg_qt){
      
      t1 <- Sys.time()
      
      data[[num_name]] <- as.factor(data[[num_name]])
      levels(data[[num_name]]) <- 1:length(levels(data[[num_name]])) # on transorme les facteur en niveau 1:n
      
      convert_unit <- tx_kg_qt[seq(1,length(tx_kg_qt), by = 3)] #On selectionne la bonne convertion en kg pour chaque observation grace aux facteurs
      convert_qt <- tx_kg_qt[seq(2,length(tx_kg_qt), by = 3)] #On selectionne la bonne convertion  de quantité pour chaque observation grace aux facteurs
      
      vecteur_convert_unit <- convert_unit[data[[num_name]]] #On fait le vecteur de convertion d'unité 
      
      vecteur_convert_qt <- convert_qt[data[[num_name]]] #On fait le vecteur de convertion de quantité
      
      data$poidsenkg <- vecteur_convert_qt/vecteur_convert_unit*data$productConditioningQuantity #On utilise nos vecteur pour avoir le poids net en kg
      
      data_NaN2 <- data[is.nan(data$poidsenkg),] 
      
      data_conv2 <- data[!(is.nan(data$poidsenkg)),]
      
      t2 <- Sys.time()
      t <- t2-t1
      
      return(list(data_conv2,data_NaN2,t))

    }

recup_convert_c_lvls <- function(data, num_unit){
  lvls <- levels(as.factor(data[[num_unit]]))
  convert_lvls <- rep(1:length(lvls), each = 2)
  i <- 1
  for(val in lvls){
    question <- paste("Combien de '",val,"' pour 1kg (NaN si impossible) : ")
    nb_unit <- as.numeric(readline(prompt = question ))
    convert_lvls[i] <- nb_unit
    i <- i+2
    
  }
  
  return(convert_lvls)
}

recup_convert_nc_lvls <- function(data, num_name){
  
  lvls <- levels(as.factor(data[[num_name]]))
  convert_lvls <- rep(1:length(lvls), each = 3)
  i <- 1
  for(val in lvls){
    
    question1 <- paste("Combien de l'unité de '",val,"' pour 1kg (NaN si impossible) : ")
    question2 <- paste("Il y a combien de cette unite : '",val,"' : (NaN si impossible) : ")
    
    nb_unit <- as.numeric(readline(prompt = question1 ))
    qt_unit <- as.numeric(readline(prompt = question2 ))
    
    convert_lvls[i] <- nb_unit
    convert_lvls[i+1] <- qt_unit
    i <- i + 3
  }
  
  return(convert_lvls)
}

calcul_kg <- function(data, nom_csv){
  
  question_nom <- paste("Quel est le numéro de colonne pour le nom du produit du fichier : ", nom_csv," ? : ")
  num_name <- as.numeric(readline(prompt = question_nom))
  
  question_qt <- paste("Quel est le numéro de colonne pour la quantité du produit du fichier : ", nom_csv," ? : ")
  num_qt <- as.numeric(readline(prompt = question_qt))
  
  question_unit <- paste("Quel est le numéro de colonne pour l'unité du produit du fichier : ", nom_csv," ? : ")
  num_unit <- as.numeric(readline(prompt = question_unit))
  
  # premier net
  
  t1 <- Sys.time()
  
  tx_kg <- recup_convert_c_lvls(data, num_unit)
  
  l1 <- convert_kg(data, num_unit, num_qt, tx_kg)
  
  tx_qt_kg <- recup_convert_nc_lvls(l1[[2]], num_name)
  
  l2 <- convert_non_calc(l1[[2]], num_name, num_qt, tx_qt_kg)
  
  data_conv <- rbind(l1[[1]],l2[[1]])
  
  t2 <- Sys.time()
  
  t <- t2-t1
  
  return(list(data_conv,l2[[2]],l1[[3]]+l2[[3]],t))
  
}
```
