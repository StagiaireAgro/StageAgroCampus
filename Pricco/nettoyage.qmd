---
title: "PRICCO"
---
# Library
```{r}

```
# Importation
```{r}
data <- read.csv("cagette_Abricot_2021_2022_2023.csv")
```
# Nétoyage

## Calculable directement
### Test 
```{r}
data$productConditioningUnit <- as.factor(data$productConditioningUnit)

levels(data$productConditioningUnit) <- 1:length(levels(data$productConditioningUnit))

levels(data$productConditioningUnit)


kg <- c(c(NaN,1),c(1000,2),c(1,3))

seq(1,length(kg), by =2)
seq(2,length(kg), by = 2)

convert_unit <- kg[seq(1,length(kg), by = 2)]

vecteur_convert <- convert_unit[data$productConditioningUnit]

data$poidsenkg <- data$productConditioningQuantity/vecteur_convert

```
### Fonction **convert_kg**

- argument tx_kg est une liste de liste :

  - exemple = c(c(tx_conv, facteur), ...) 
  - tx_conv = combien de cette unité pour avoir 1kg
  - facteur = le numéro de facteur
  - il faut aussi mettre les valeurs qui ne sont pas calculable mettre les valeur !!!!! exemple : c(NaN, 5)
```{r}
convert_kg <- function(data, num_unit, num_qt, tx_kg){
      
      t1 <- Sys.time()
      
      data[[num_unit]] <- as.factor(data[[num_unit]])
      levels(data[[num_unit]]) <- 1:length(levels(data[[num_unit]])) # on transorme les facteur en niveau 1:n
      
      convert_unit <- tx_kg[seq(1,length(tx_kg), by = 2)] #On selectionne la bonne convertion pour chaque observation grace au facteur
      vecteur_convert <- convert_unit[data[[num_unit]]]   #On fait le vecteur de convertion pour chaque observation
      
      data$poidsenkg <- data[[num_qt]]/vecteur_convert #
      
      data_NaN <- data[is.nan(data$poidsenkg),] 
      
      data_conv <- data[!(is.nan(data$poidsenkg)),]
      
      t2 <- Sys.time()
      
      t <- t2-t1
      
      return(list(data_conv,data_NaN,t)) 

    }

# test fonction 

num_unit <- 8

num_qt <- 7

tx_kg <- c(c(NaN,1),c(1000,2),c(1,3),c(NaN,4))

data_conv_kg <- convert_kg(data,num_unit,num_qt,tx_kg)

data_conv <- data_conv_kg[[1]]

data_NaN <- data_conv_kg[[2]]

temps <- system.time(data_conv_kg <- convert_kg(data,num_unit,num_qt,tx_kg))

temps

```
## Non calculable directement

### Fonction **convert_non_calc**

- argument tx_kg_qt est une liste de liste :

  - exemple = c(c(tx_conv, quantite, facteur), ...) 
  - tx_conv = combien de cette unité pour avoir 1kg
  - quanntite = la quantite d'unité que l'on a dans le `ProductName`
  - facteur = le numéro de facteur
  - il faut aussi mettre les valeurs qui ne sont pas calculable mettre les valeur !!!!! exemple : c(NaN,NaN,5)
```{r}

    convert_non_calc <- function(data, num_name, num_qt, tx_kg_qt){
      
      t1 <- Sys.time()
      
      data[[num_name]] <- as.factor(data[[num_name]])
      levels(data[[num_name]]) <- 1:length(levels(data[[num_name]])) # on transorme les facteur en niveau 1:n
      
      convert_unit <- tx_kg_qt[seq(1,length(tx_kg_qt), by = 3)] #On selectionne la bonne convertion en kg pour chaque observation grace aux facteurs
      convert_qt <- tx_kg_qt[seq(2,length(tx_kg_qt), by = 3)] #On selectionne la bonne convertion  de quantité pour chaque observation grace aux facteurs
      
      vecteur_convert_unit <- convert_unit[data[[num_name]]] #On fait le vecteur de convertion d'unité 
      
      vecteur_convert_qt <- convert_qt[data[[num_name]]] #On fait le vecteur de convertion de quantité
      
      data$poidsenkg <- vecteur_convert_qt/vecteur_convert_unit*data[[num_qt]]#On utilise nos vecteur pour avoir le poids net en kg
      
      data_NaN2 <- data[is.nan(data$poidsenkg),] 
      
      data_conv2 <- data[!(is.nan(data$poidsenkg)),]
      
      t2 <- Sys.time()
      t <- t2-t1
      
      return(list(data_conv2,data_NaN2,t))

    }

#Test de la fonction pour les observations non calculable

levels(as.factor(data_NaN$productName))

tx_kg_qt <- c(c(1,1,1),c(1,1,2),c(1000,500,3),c(1,2,4),c(1000,400,5),c(1,1,6),
              c(1,1,7),c(1,3,8),c(1,5,9),c(1000,500,10),c(1,4,11),c(NaN,NaN,12),c(1,1,13),c(1,5,14))

num_name <- 5
num_qt <- 7

data_conv_non_calc <- convert_non_calc(data = data_NaN,5,7,tx_kg_qt)

data_NaN2 <- data_conv_non_calc[[2]]

data_conv2 <- data_conv_non_calc[[1]]

temps2 <- system.time(data_conv_non_calc <- convert_non_calc(data = data_NaN,5,7,tx_kg_qt))
temps2

```
### Fonction cumulé
```{r}

```






