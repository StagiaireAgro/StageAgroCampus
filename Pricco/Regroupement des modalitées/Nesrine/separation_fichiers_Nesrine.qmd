---
title: "separation_fichier"
format: html
editor: visual
---

# I) Chargement des bibliothèques nécessaires

```{r,message=FALSE}

# Le tidyverse est un méta-package qui regroupe plusieurs packages R
# utiles pour la manipulation, la transformation, et la visualisation de données :
# - ggplot2 : pour la visualisation
# - dplyr : pour la manipulation de données (filtrer, trier, grouper...)
# - tidyr : pour le reshaping (pivot_longer, pivot_wider, etc.)
# - readr : pour lire des fichiers plats (CSV, TSV...)
# - purrr : pour la programmation fonctionnelle (map, etc.)
# - tibble : pour manipuler des data frames modernes
# - stringr : pour manipuler des chaînes de caractères
# - forcats : pour manipuler des facteurs

library(tidyverse)

# Pour lire les fichiers CSV
library(readr)

# Pour gérer les accents et normaliser les chaînes
library(stringi)

# Pour manipuler et détecter les chaînes de caractères
library(stringr)


```

# II) Importation des fichiers

```{r}

########################## Socleo ########################## 

########################## coop circuit ########################## 

data_coop_circuit_2021 <- read.csv("data/coop circuit/par annee/2021.csv",sep = ",")
data_coop_circuit_2022 <- read.csv("data/coop circuit/par annee/2022.csv",sep = ";")
data_coop_circuit_2023 <- read.csv("data/coop circuit/par annee/2023.csv",sep = ";")
data_coop_circuit_2024 <- read.csv("data/coop circuit/par annee/2024.csv",sep = ";")

########################## la ruche qui dit oui ########################## 

data_ruche_oui_2021_part_1 <- read.csv("data/la ruche qui dit oui/historique_2021part1.csv",sep = ";")
data_ruche_oui_2021_part_2 <- read.csv("data/la ruche qui dit oui/historique_2021part1.csv",sep = ";")
data_ruche_oui_2022 <- read.csv("data/la ruche qui dit oui/historique_2022.csv",sep = ";")
data_ruche_oui_2023 <- read.csv("data/la ruche qui dit oui/historique_2023.csv",sep = ";")
data_ruche_oui_2024 <- read.csv("data/la ruche qui dit oui/historique_2024.csv",sep = ";")
```

# III) Définition de la liste de produits

```{r}
# Liste des produits alimentaires à rechercher
liste_produits <- c(
  "Jus de Poire","Jus de pêche","Abricot", "Banane", "Cerise", "Clémentine", "Fraise", "Kiwi", "Nectarine",
  "Noix", "Pêche", "Poireau", "Pomme de terre", "Jus de Pomme", "Pomme", "Prune",
  "Raisin", "Asperge", "Aubergine", "Carotte", "Céleri-branche", "Chou fleur",
  "Concombre", "Courgette", "Endive", "Haricot vert", "Laitue", "Melon",
  "Oignon", "Poire", "Poivron", "Potiron", "Tomate", "Lait", "Œuf", "Boeuf",
  "Porc", "Poulet", "Lentille","Cassis","Framboise","Noisette","Confiture de fraise","Miel","Pruneaux"
)

```

# IV) Fonction de tri des produits dans les données

```{r}

# 1) Fonction de séparation de fichiers par rapport aux produits

separation_fichiers <- function(data, num_name, list_produits, sup_espace = 0) {
  
  # Trie les noms de produits par longueur décroissante pour capturer d’abord les plus spécifiques
  produits <- list_produits[order(nchar(list_produits), decreasing = TRUE)]
  list_produits <- list_produits[order(nchar(list_produits), decreasing = TRUE)]
  
  # Normalisation de la liste de produits : minuscule, sans accents et sans pluriels
  list_produits <- str_to_lower(list_produits)
  list_produits <- stri_trans_general(list_produits, "Latin-ASCII")
  list_produits_sans_s <- gsub("s\\b", "", list_produits, ignore.case = TRUE)
  list_produits_sans_s <- gsub("x\\b", "", list_produits_sans_s, ignore.case = TRUE)
  list_produits_sans_s <- gsub("-", " ", list_produits_sans_s, ignore.case = TRUE)
  
  # Normalisation des noms de produits dans la colonne désignée
  noms <- data[[num_name]]
  noms <- str_to_lower(noms)
  noms <- str_replace_all(noms, "/", " ")
  noms <- stri_trans_general(noms, "Latin-ASCII")
  noms_sans_s <- gsub("s\\b", "", noms, ignore.case = TRUE)
  noms_sans_s <- gsub("x\\b", "", noms_sans_s, ignore.case = TRUE)
  noms_sans_s <- gsub("-", " ", noms_sans_s, ignore.case = TRUE)
  
  # Optionnel : suppression complète des espaces dans la liste des noms de produits
  if(sup_espace){
    list_produits_sans_s <- str_replace(list_produits_sans_s, " ", "")
    noms_sans_s <- str_replace(noms_sans_s, " ", "")
  }
  
  # Création de la matrice de présence : est-ce que chaque produit apparaît dans chaque ligne ?
  presences_produits <- sapply(list_produits_sans_s, function(produit) grepl(paste0(produit), noms_sans_s))
  
  # Attribution du produit détecté selon 2 conditions
  attribution_noms_produits <- apply(presences_produits, 1, function(presence_un_produit) {
    if (sum(presence_un_produit) == 1) {
      # Condition 1 : un seul produit détecté
      produits[presence_un_produit] 
    } else if (sum(presence_un_produit) > 1) {
      # Condition 2 : plusieurs noms de produits détectés, on garde le premier seulement si les autres sont inclus dans celui-ci
      # Le nombre de prdouits détectés dans chaque ligne
      nb_mots <- length(list_produits_sans_s[presence_un_produit])
      
      # Sélectionne tous les produits détectés sauf le premier
      autres <- list_produits_sans_s[presence_un_produit][2:nb_mots]
      if (all(sapply(autres, function(un_fruit) grepl(un_fruit, list_produits_sans_s[presence_un_produit][1])))) {
        produits[presence_un_produit][1]
        
      # Dans les cas ambigus, la valeur de retour est une valeur manquante de type character
      } else {
        NA_character_
      }
    } else {
      # Dans les cas d'aucun produit détecté, la valeur de retour est une valeur manquante de type character
      NA_character_
    }
  })
  
  # Liste complète des produits détectés pour chaque ligne
  list_modalites <- apply(presences_produits, 1, function(presence_un_produit) { 
    if (sum(presence_un_produit) >= 1) {
      list_produits_sans_s[presence_un_produit]
    } else {
      NA_character_
    }
  })
  
  # Ajout des colonnes au tableau de données
  data$noms_sans_s <- noms_sans_s
  data$attribution_noms_produits <- attribution_noms_produits
  data$list_modalites <- sapply(list_modalites, toString)
  
  # Séparation des données bien classifiées et celles ambigües
  data_ok <- data[!is.na(data$attribution_noms_produits),]
  data_pas_ok <- data[is.na(data$attribution_noms_produits),]
  
  # Retourne une liste contenant les deux ensembles
  return(list(data_ok, data_pas_ok))
}

```


```{r}

# 2) Application de la fonction 

# On applique la fonction sur les données de 2021
liste_data_ok_et_pas_ok <- separation_fichiers(data_coop_circuit_2021, 1, liste_produits, sup_espace = 0)

# Données correctement classifiées
data_ok <- liste_data_ok_et_pas_ok[[1]]

# Données non classifiées (ambigües ou vides)
data_pas_ok <- liste_data_ok_et_pas_ok[[2]]

# Valeurs uniques présentes dans les lignes non classées
liste_produits_pas_ok_uniques <- unique(data_pas_ok[[1]])

# 3) Découpage par produit (fusion de split_data simplifiée) 
# On divise le tableau selon les valeurs de la liste de fuits
liste_data_ok <- split(data_ok, data_ok$attribution_noms_produits)

# Exemple : on récupère toutes les lignes correspondant à "Aubergine"
data_aubergine <- liste_data_ok$Aubergine

```


# V) Tests de la fonction de tri des produits

```{r}

#############################################################
#                                                           #
#   V) Tests de la fonction split sur différents fichiers   #
#                                                           #
############################################################# 

########################## Socleo ########################## 

########################## coop circuit ########################## 

########################## 2021 

# On applique la fonction sur les données de 2021
liste_resultats_coop_circuit_2021 <- separation_fichiers(data_coop_circuit_2021, 1, liste_produits, sup_espace = 0)

# Données correctement classifiées
data_ok_coop_circuit_2021 <- liste_resultats_coop_circuit_2021[[1]]

# Données non classifiées (ambigües ou vides)
data_pas_ok_coop_circuit_2021  <- liste_resultats_coop_circuit_2021[[2]]

# Valeurs uniques présentes dans les lignes non classées
liste_produits_pas_ok_uniques <- unique(data_pas_ok_coop_circuit_2021[[1]])

# 3) Découpage par produit (fusion de split_data simplifiée) 
# On divise le tableau selon les valeurs de la liste de fuits
liste_data_ok_coop_circuit_2021<- split(data_ok_coop_circuit_2021, data_ok_coop_circuit_2021$attribution_noms_produits)

# Exemple : on récupère toutes les lignes correspondant à "Aubergine"
data_aubergine <- liste_data_ok_coop_circuit_2021$Aubergine

########################## la ruche qui dit oui ########################## 
# 
# # On renomme la variable du nom de produit pour que la fonction marche
# names(data_ruche_oui_2021_part_1)[8] <- c("name")
# 
# # On teste 
# liste_resultats_ruche_oui_2021_part_1 <- split_data(data_ruche_oui_2021_part_1,produits)
# 
# # On renomme la variable du nom de produit pour que la fonction marche
# names(data_ruche_oui_2021_part_2)[8] <- c("name")
# 
# # On teste 
# liste_resultats_ruche_oui_2021_part_2 <- split_data(data_ruche_oui_2021_part_2,produits)
# 
# # On renomme la variable du nom de produit pour que la fonction marche
# names(data_ruche_oui_2022)[8] <- c("name")
# 
# # On teste 
# liste_resultats_ruche_oui_2022 <- split_data(data_ruche_oui_2022,produits)
# 
# # On renomme la variable du nom de produit pour que la fonction marche
# names(data_ruche_oui_2023)[8] <- c("name")
# 
# # On teste 
# liste_resultats_ruche_oui_2023 <- split_data(data_ruche_oui_2023,produits)
# 
# # On renomme la variable du nom de produit pour que la fonction marche
# names(data_ruche_oui_2024)[8] <- c("name")
# 
# # On teste 
# liste_resultats_ruche_oui_2024 <- split_data(data_ruche_oui_2024,produits)

###################################################################
#                                                                 #
#   Exemple d'accès à un sous-dataframe de la liste de résultat   #
#                                                                 #
################################################################### 
# 
# view(liste_resultats_socleo_2021$data_pomme)
# 
# view(liste_resultats_socleo_2022$data_autres)
# 
# view(liste_resultats_socleo_2023$data_autres)

```

# VI) Renommage des tables par rapport au nom des fournisseurs

```{r}

###################################################################
#                                                                 #
#               Renommage des tables pour socleo                  #
#                                                                 #
################################################################### 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_socleo_2021)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_socleo <- sub("^data", "socleo", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_socleo_2021 <- setNames(liste_resultats_socleo_2021, noms_socleo)

########################## Année 2022 ########################## 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_socleo_2022)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_socleo <- sub("^data", "socleo", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_socleo_2022 <- setNames(liste_resultats_socleo_2022, noms_socleo)

########################## Année 2023 ########################## 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_socleo_2023)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_socleo <- sub("^data", "socleo", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_socleo_2023 <- setNames(liste_resultats_socleo_2023, noms_socleo)

########################## Année 2024 ########################## 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_socleo_2024)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_socleo <- sub("^data", "socleo", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_socleo_2024 <- setNames(liste_resultats_socleo_2024, noms_socleo)

###################################################################
#                                                                 #
#         Renommage des tables pour coop circuit                  #
#                                                                 #
################################################################### 

########################## Année 2021 ########################## 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_coop_circuit_2021)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_coop_circuit <- sub("^data", "coop_circuit", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_coop_circuit_2021 <- setNames(liste_resultats_coop_circuit_2021, noms_coop_circuit)

########################## Année 2022 ########################## 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_coop_circuit_2022)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_coop_circuit <- sub("^data", "coop_circuit", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_coop_circuit_2022 <- setNames(liste_resultats_coop_circuit_2022, noms_coop_circuit)

########################## Année 2023 ########################## 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_coop_circuit_2023)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_coop_circuit <- sub("^data", "coop_circuit", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_coop_circuit_2023 <- setNames(liste_resultats_coop_circuit_2023, noms_coop_circuit)

########################## Année 2024 ########################## 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_coop_circuit_2024)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_coop_circuit <- sub("^data", "coop_circuit", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_coop_circuit_2024 <- setNames(liste_resultats_coop_circuit_2024, noms_coop_circuit)


###################################################################
#                                                                 #
#     Renommage des tables pour la ruche qui dit oui              #
#                                                                 #
################################################################### 

########################## Année 2021 ########################## 

###################### Partie 1 : 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_ruche_oui_2021_part_1)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_ruche_oui <- sub("^data", "ruche_qui_dit_oui", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_ruche_oui_2021_part_1 <- setNames(liste_resultats_ruche_oui_2021_part_1, noms_ruche_oui)

###################### Partie 2 : 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_ruche_oui_2021_part_2)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_ruche_oui <- sub("^data", "ruche_qui_dit_oui", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_ruche_oui_2021_part_2 <- setNames(liste_resultats_ruche_oui_2021_part_2, noms_ruche_oui)


########################## Année 2022 ########################## 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_ruche_oui_2022)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_ruche_oui <- sub("^data", "ruche_qui_dit_oui", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_ruche_oui_2022 <- setNames(liste_resultats_ruche_oui_2022, noms_ruche_oui)


########################## Année 2023 ########################## 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_ruche_oui_2023)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_ruche_oui <- sub("^data", "ruche_qui_dit_oui", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_ruche_oui_2023 <- setNames(liste_resultats_ruche_oui_2023, noms_ruche_oui)

########################## Année 2024 ########################## 

# Noms des jeux de données de la liste de résultat
noms_data <- names(liste_resultats_ruche_oui_2024)

# Renommage des noms en remplaçant 'data' par 'bulle'
noms_ruche_oui <- sub("^data", "ruche_qui_dit_oui", noms_data)

# Appliquer les nouveaux noms à la liste
liste_resultats_ruche_oui_2024 <- setNames(liste_resultats_ruche_oui_2024, noms_ruche_oui)


```

# VII) Fusion des fichiers par produit avec toutes les années confondues

```{r}

###################################################################
#                                                                 #
#                   Fusion des tables                             #
#                                                                 #
################################################################### 

########################## Socleo ########################## 

liste_resultats_socleo_tts_annees <- Map(bind_rows, 
                                        liste_resultats_socleo_2021, 
                                        liste_resultats_socleo_2022,
                                        liste_resultats_socleo_2023,
                                        liste_resultats_socleo_2024)

########################## coop circuit ########################## 

liste_resultats_coop_circuit_tts_annees <- Map(bind_rows, 
                                        liste_resultats_coop_circuit_2021, 
                                        liste_resultats_coop_circuit_2022,
                                        liste_resultats_coop_circuit_2023,
                                        liste_resultats_coop_circuit_2024)

########################## la ruche qui dit oui ########################## 

################ Transformer en nuùérique pour 2023 

library(purrr)

liste_resultats_ruche_oui_2021_part_1 <- map(liste_resultats_ruche_oui_2021_part_1, ~ mutate(.x, weight_raw_item  = as.double(weight_raw_item )))

liste_resultats_ruche_oui_2021_part_2 <- map(liste_resultats_ruche_oui_2021_part_2, ~ mutate(.x, weight_raw_item  = as.double(weight_raw_item )))

liste_resultats_ruche_oui_2022 <- map(liste_resultats_ruche_oui_2022, ~ mutate(.x, weight_raw_item  = as.double(weight_raw_item )))

liste_resultats_ruche_oui_2023 <- map(liste_resultats_ruche_oui_2023, ~ mutate(.x, weight_raw_item  = as.double(weight_raw_item )))

liste_resultats_ruche_oui_2024 <- map(liste_resultats_ruche_oui_2024, ~ mutate(.x, weight_raw_item  = as.double(weight_raw_item )))

liste_resultats_ruche_oui_tts_annees <- Map(bind_rows,
                                        liste_resultats_ruche_oui_2021_part_1,
                                        liste_resultats_ruche_oui_2021_part_2,
                                        liste_resultats_ruche_oui_2022,
                                        liste_resultats_ruche_oui_2023,
                                        liste_resultats_ruche_oui_2024)

```

# VIII) Export des fichiers séparés au format csv

```{r}
export_fichiers_separes <- function(liste_data, dossier_export = "export_csv_legumes") {
  # Crée le dossier s'il n'existe pas déjà
  if (!dir.exists(dossier_export)) {
    dir.create(dossier_export, recursive = TRUE)
  }

  # Boucle sur chaque élément de la liste
  for (nom_data in names(liste_data)) {
    # Construit le chemin de fichier (remplace les espaces par des underscores)
    chemin_fichier <- file.path(dossier_export, paste0(gsub(" ", "_", nom_data), ".csv"))
    
    # Écrit le dataframe au format CSV avec encodage UTF-8
    write.csv(liste_data[[nom_data]], file = chemin_fichier, row.names = FALSE, fileEncoding = "UTF-8",
              sep = ";")
  }

}

########################## Socleo ########################## 

export_fichiers_separes(liste_resultats_socleo_tts_annees, dossier_export = "export_csv_socleo")

########################## coop circuit ########################## 

export_fichiers_separes(liste_resultats_coop_circuit_tts_annees, dossier_export = "export_csv_coop_circuit")

########################## la ruche qui dit oui ########################## 

```


