library(stringi)
library(stringr)

library(readr)
X2021 <- read_csv("data/socleo/2021.csv")
View(X2021)

# liste des produits

fruits <- c(
  "Jus de Poire","Jus de pêche","Abricot", "Banane", "Cerise", "Clémentine", "Fraise", "Kiwi", "Nectarine",
  "Noix", "Pêche", "Poireau", "Pomme de terre", "Jus de Pomme", "Pomme", "Prune",
  "Raisin", "Asperge", "Aubergine", "Carotte", "Céleri-branche", "Chou fleur",
  "Concombre", "Courgette", "Endive", "Haricot vert", "Laitue", "Melon",
  "Oignon", "Poire", "Poivron", "Potiron", "Tomate", "Lait", "Œuf", "Boeuf",
  "Porc", "Poulet", "Lentille","Cassis","Framboise","Noisette","Confiture de fraise","Miel"
)



tri <- function(data, num_name, list_fruits, sup_espace = 0) {
  
  # On tri de manière décroissante notre liste de produit
  list_fruits <- list_fruits[order(nchar(list_fruits), decreasing = T)]
  
  # On normalise notre liste de produit
  list_fruits <- str_to_lower(list_fruits)
  list_fruits <- stri_trans_general(list_fruits, "Latin-ASCII")
  list_fruits_sans_s <- gsub("s", "", list_fruits, ignore.case = TRUE) # il faut utiliser gsub car str_replace_all c'est trop nul
  
  # On normalise notre colonne avec les noms de produit
  noms <- data[[num_name]]
  noms <- str_to_lower(noms)
  noms <- str_replace_all(noms, "/", " ")
  noms <- stri_trans_general(noms, "Latin-ASCII")
  noms_sans_s <- gsub("s", "", noms, ignore.case = TRUE)
  
  # On retire ou par les espaces
  if(sup_espace){
    list_fruits_sans_s <- str_replace(list_fruits_sans_s, " ", "")
    noms_sans_s <- str_replace(noms_sans_s, " ", "")
  }
  
  #on verifie la presence pour chaque ligne des produit -> matrice(length(noms), length(list_produits))
  presence <- sapply(list_fruits_sans_s, function(fruit) grepl(paste0("\\b", fruit, "\\b"), noms_sans_s))
  
  # On regarde pour chaque ligne de presence
  moda <- apply(presence, 1, function(pre) {
    if (sum(pre) == 1) { # Condition 1 : Si il y a que un seul  produit de détecté on le garde
      list_fruits[pre] 
      
    } else if (sum(pre) > 1) {           # Condition 2 : Si il y en a plus de 1 on garde le premier ssi tout les autres produits sont comris
    nb_mots <- length(list_fruits[pre])  # dans le premier (exemple : "pomme" est compris de "jus de pomme")
    autres <- list_fruits[pre][2:nb_mots]
  
    if (all(sapply(autres, function(f) grepl(f, list_fruits[pre][1])))) {
      list_fruits[pre][1]
    } else { # Non respect de Condition 2
      NA_character_
    }
    }else { # Non respect de Condition 1
      NA_character_
    }
  })
  # On On garde aussi la liste avec tout les produit trouvé par ligne pour comparer
  noms_mod <- apply(presence, 1, function(pre) { 
    if (sum(pre) >= 1) {
      list_fruits[pre]
    }else{
      NA_character_
    }
    })
  
  data$noms_sans_s <-  noms_sans_s
  
  data$moda <- moda
  
  data$noms_mod <- noms_mod
      
  data_ok <- data[!is.na(data$noms_mod),]
  data_pas_ok <- data[is.na(data$noms_mod),]
  
  return(list(data_ok, data_pas_ok))

}

a <- tri(X2021, 1, fruits, sup_espace = 0)
a

b <- a[[1]]
c <- a[[2]]
