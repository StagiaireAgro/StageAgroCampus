---
title: "Traitement_prod_tranfo_asperges_prompt_60_2"
format: html
---

# I) Importation des librairies

```{r,message=FALSE}
library("tidyverse")

# Chargement du package writexl pour exporter des data frames au format Excel (.xlsx)
library(writexl)

# Chargement des fichiers Excel
library(readxl)

# Calcul de la distance de Levenshtein
library(stringdist)
```

# II) Extraction des résultats (noms des produits transformés) renvoyé par le modèle de langage

```{r}
# Fonction permettant d'extraire une liste de produits transformés depuis un texte généré par un LLM

extraire_liste_produits <- function(texte_source) {
  # Étape 1 : Remplace les appels à 'C(' par 'c(' (R est sensible à la casse, 'C(' pourrait causer une erreur)
  texte_source <- gsub("C\\(", "c(", texte_source, ignore.case = TRUE)

  # Étape 2 : Supprime les sauts de ligne pour éviter de casser la chaîne de caractères lors de l'évaluation
  texte_source <- gsub("\n", " ", texte_source)

  # Étape 3 : Définit le motif (regex) pour détecter un appel à la fonction R c(...) contenant une liste de chaînes
  motif_vecteur <- "c\\s*\\((.*?)\\)"

  # Étape 4 : Cherche la première correspondance avec le motif défini ci-dessus
  correspondance_vecteur <- regmatches(texte_source, regexpr(motif_vecteur, texte_source, perl = TRUE))

  # Étape 5 : Si une correspondance a été trouvée et qu’elle n’est pas vide, tenter de l’évaluer comme du code R
  if (length(correspondance_vecteur) > 0 && correspondance_vecteur != "") {
    tentative_evaluation <- tryCatch(
      eval(parse(text = correspondance_vecteur)),  # Essaie d'exécuter le texte comme du code R
      error = function(e) NULL  # En cas d'erreur, retourne NULL
    )

    # Étape 6 : Si l’évaluation a réussi et retourne un vecteur de chaînes de caractères, le retourner
    if (!is.null(tentative_evaluation) && is.character(tentative_evaluation)) {
      return(tentative_evaluation)
    }
  }

  # Étape 7 : Si aucun vecteur c(...) exploitable n’a été trouvé, chercher manuellement des chaînes entre guillemets
  positions_chaines <- gregexpr('"([^"]{2,100})"', texte_source, perl = TRUE)
  chaines_trouvees <- regmatches(texte_source, positions_chaines)[[1]]

  # Étape 8 : Si au moins deux chaînes sont extraites, les retourner comme vecteur après nettoyage
  if (length(chaines_trouvees) >= 2) {
    return(trimws(gsub('"', "", chaines_trouvees)))  # Supprime les guillemets et espaces superflus
  }

  # Étape 9 : Vérifie si le texte ressemble à une liste (éléments précédés de * ou -)
  if (grepl("\\*\\s+", texte_source) || grepl("-\\s+", texte_source)) {
    lignes_separees <- unlist(strsplit(texte_source, "\n"))  # Découpe le texte ligne par ligne
    lignes_avec_puce <- grep("^\\s*(\\*|-)", lignes_separees, value = TRUE)  # Ne garde que les lignes avec puces

    if (length(lignes_avec_puce) > 0) {
      return(trimws(gsub("^(\\*|-)+\\s*", "", lignes_avec_puce)))  # Supprime les puces et espaces initiaux
    }
  }

  # Étape 10 : Si aucune méthode n’a permis d’extraire une liste, retourner NULL
  return(NULL)
}

```


# III) Comparaison des produits listés dans les prompts avec ceux extraits par LLM

```{r}
comparer_listes_produits <- function(prompts_attendus, reponses_llm, verite_terrain=NULL) {
  
  # Étape 1 : Extraction des produits attendus depuis les prompts (niveau "level")
  produits_attendus <- lapply(prompts_attendus, function(texte_prompt) {
    # Extrait tout ce qui suit "Voici la liste de produits à analyser :"
    texte_extrait <- str_extract(
      texte_prompt,
      "(?s)(?<=Voici la liste de produits à analyser :)\\s*.*"
    )
    # Découpe le texte extrait ligne par ligne
    unlist(strsplit(texte_extrait, "\n"))
  })
  
  # Étape 2 : Extraction des produits reconnus par le LLM (via la fonction extraire_liste_produits defini plus haut)
  produits_extraits_llm <- lapply(reponses_llm, function(texte_reponse) {
    extraire_liste_produits(texte_reponse)
  })
  
  # Fonctionpour remplacer les caractères spéciaux regex
  remplacer_caract_speci_regex <- function(x) {
    stringr::str_replace_all(x, "([\\^$.|?*+()\\[\\]{}])", "\\\\\\1")
  }
  
    # Fonction pour nettoyer les noms
  clean_name <- function(x) {
    stringr::str_replace_all(x, "[^a-zA-Z0-9 ]", "")
    }

  # Étape 3 : Comparaison entre les produits attendus et extraits
  comparaison <- lapply(seq_along(produits_attendus), function(i) {
    liste_attendue <- produits_attendus[[i]]
    liste_extraite <- produits_extraits_llm[[i]]
    
    # Identifie les produits présents dans les deux listes (correspondance exacte)
    produits_communs <- intersect(liste_attendue, liste_extraite)
    
    # Identifie les "hallucinations" brutes ou pseudo_hallucinations : produits extraits par le LLM mais absents de la liste initiale 
    pseudo_hallucinations <- setdiff(liste_extraite, liste_attendue)
    
    # Identifie les hallucinations réelles : toutes les pseudo_hallucinations qui ne sont pas des nom de produits mal écrits par le modèle, c'est ceux qu'il a inventé
    # Pour cela on construit une expression régulière avec chaque mot ou élément du nom de produit renvoyé par le modèle () et on va recherché si il y existe des vrai noms de produits qui sont composé de l'intégralité de ces mots, si non alors on considère que ces noms de produit ont été inventé par le modèle (hallucinations_reelles)

    hallucinations_reelles <- pseudo_hallucinations[!sapply(pseudo_hallucinations, function(h) {
      #  on nettoie le nom du produits et on le découpe à partir des espaces
      mots <- strsplit(tolower(clean_name(h)), "\\s+")[[1]] 
      mots <- remplacer_caract_speci_regex(mots)
      
      if (length(mots) == 0) return(FALSE)  # cas vide (pas de hallucination)
      
      # construction du regex : .*mot1.*mot2.*mot3.*
      pattern <- paste0(".*", paste(mots, collapse = ".*"), ".*")
      any(grepl(pattern, tolower(clean_name(liste_attendue))))
    })]
    
    # on retir les vrais hallucinations des pseudo_hallucinations (vrai nom de produit mal écrit)
    pseudo_hallucinations <- setdiff(pseudo_hallucinations, hallucinations_reelles)
    
    # on va rechercher la vrai écriture des pseudo_hallucinations pour corriger l'orthographe des réponses du modèle
    hallucinations_corrige <- unlist(lapply(pseudo_hallucinations, function(h) {
  mots <- strsplit(tolower(clean_name(h)), "\\s+")[[1]]
  mots <- remplacer_caract_speci_regex(mots)
  if (length(mots) == 0) return(NULL) 
  
  pattern <- paste0(".*", paste(mots, collapse = ".*"), ".*")
  
  # on récupère les vrais noms de produit qui match avec l'expression régulière
  vrais_noms <- liste_attendue[sapply(liste_attendue, function(p) {
    grepl(pattern, tolower(clean_name(p)))
  })]
  
  if (length(vrais_noms) == 0) return(NULL) # Cas vide
  
  # Si un seul match, on le retourne directement
  if (length(vrais_noms) == 1) return(vrais_noms)
  
  # Sinon il y a plusieurs noms de produit, dans ce cas on va chercher à retourner le vrai nom de produit qui est le plus proche de celui renvoyé par le modèle 
  
  # rechercher une correspondance exacte (en minuscule)
  nom_llm <- tolower(h)
  correspondance_exacte <- vrais_noms[tolower(vrais_noms) == nom_llm]
  
  if (length(correspondance_exacte) == 1) {
    return(correspondance_exacte)
  } else {
    # On choisit celui avec la plus petite distance de Levenshtein (vrai nom de produit qui est le plus proche de celui renvoyé par le modèle)
    distances <- stringdist(nom_llm, tolower(vrais_noms), method = "lv")
    meilleur_nom <- vrais_noms[which.min(distances)]
    return(meilleur_nom)
  }
}))
    # vérifier qu'on a bien des levels uniques
    hallucinations_corrige <- unique(hallucinations_corrige)
    
    # On corrige les réponses du modèle en rajoutant les vrais noms de produit dans les Levels communs s’ils n’existent pas déjà (unique)
    produits_communs <- unique(c(produits_communs, hallucinations_corrige))
    
    # Si on a une vérité terrain
    if (!is.null(verite_terrain)){
      # On récupère les vrais noms des produits transformés selon la vérité terrain, étiqueté avec "1" dans la colonne Prod_transfo_ou_non
      verite_terrain_produit_transfo <- verite_terrain$levels_asperge[verite_terrain$Prod_transfo_ou_non == "1"]
      
      # On récupère parmi les vrais noms des produits ceux qui sont des produits transformés (les produits transformés attendus)
      prod_transfo_levels_initiaux <- intersect(verite_terrain_produit_transfo, liste_attendue)
      
      # On peut ainsi avoir les noms des produits transformés trouvé par le llm
      produit_transfo_llm <- intersect(prod_transfo_levels_initiaux, produits_communs)
      
      # On en déduit les noms des produits transformés pas trouvé par le llm
      prod_transfo_pas_trouver <- setdiff(prod_transfo_levels_initiaux, produit_transfo_llm)
    } else{
      prod_transfo_levels_initiaux <- NA
      produit_transfo_llm <- produits_communs
      prod_transfo_pas_trouver <- NA
    }
    
    
    # Structure des résultats par comparaison
    list(
      levels_initiaux = liste_attendue,
      levels_llm = liste_extraite,
      fausses_hallucina = pseudo_hallucinations,
      vraies_hallucina = hallucinations_reelles,
      levels_communs = produits_communs,
      prod_transfo_attendus = prod_transfo_levels_initiaux,
      produit_transfo_llm = produit_transfo_llm,
      prod_transfo_pas_trouver = prod_transfo_pas_trouver
    )
  })
  
  # Étape 4 : Retourne la liste complète des résultats de comparaison
  return(comparaison)
}
```

# IV) Tableau d'indicateur de pureté 

```{r}
# fonction pour construire le tableau d'indicateur
table_indicateurs_purete <- function(resultats_comparaison){
  
  # On initialise le tableau d'indicateur de pureté 
  table_indica_purete <- data.frame(
    chunck_traite = c(1:length(resultats_comparaison)),
    nb_levels_initial = NA,
    nb_levels_llm = NA,
    nb_levels_commun = NA,
    nb_fausses_halluci_llm = NA,
    nb_vraies_halluci_llm = NA,
    nb_prod_attendus = NA, 
    nb_prod_transfo_trouves_llm = NA,
    nb_prod_transfo_pas_trouves_llm = NA,
    nb_prod_llm_st_prod_bruts = NA)

  # On remplit la colonne du nb_levels_initial
  table_indica_purete$nb_levels_initial <- sapply(resultats_comparaison, function(x) length(x$levels_initiaux))
  
  # On remplit la colonne du nb_levels_llm
  table_indica_purete$nb_levels_llm <- sapply(resultats_comparaison, function(x) length(x$levels_llm))

  # On remplit la colonne du nb_levels_commun
  table_indica_purete$nb_levels_commun <- sapply(resultats_comparaison, function(x) length(x$levels_communs))
  
  # On remplit la colonne du nb_fausses_halluci_llm
  table_indica_purete$nb_fausses_halluci_llm <- sapply(resultats_comparaison, function(x) length(x$fausses_hallucina))
  
  # On remplit la colonne du nb_vraies_halluci_llm
  table_indica_purete$nb_vraies_halluci_llm <- sapply(resultats_comparaison, function(x) length(x$vraies_hallucina))
  
  # On remplit la colonne du nb_prod_attendus
  table_indica_purete$nb_prod_attendus <- if(!any(is.na(resultats_comparaison[[1]]$prod_transfo_attendus))){sapply(resultats_comparaison, function(x) length(x$prod_transfo_attendus))}
  
  # On remplit la colonne du nb_prod_transfo_trouves_llm
  table_indica_purete$nb_prod_transfo_trouves_llm <- sapply(resultats_comparaison, function(x) length(x$produit_transfo_llm))
  
  # On remplit la colonne du nb_prod_transfo_pas_trouves_llm
  table_indica_purete$nb_prod_transfo_pas_trouves_llm <- if(!any(is.na(resultats_comparaison[[1]]$prod_transfo_pas_trouver))){sapply(resultats_comparaison, function(x) length(x$prod_transfo_pas_trouver))}
  
  # On remplit la colonne du nombre de produit llm qui sont des produits bruts
  table_indica_purete$nb_prod_llm_st_prod_bruts <- if(!any(is.na(resultats_comparaison[[1]]$prod_transfo_pas_trouver))){sapply(resultats_comparaison, function(x) (length(x$levels_communs) - length(x$produit_transfo_llm)))}
  
  
  
  ### Calcul des moyennes et totaux
  
  # Selectionner les noms des colonnes en retirant la colonne "chunck_traite" 
  cols_to_sum <- names(table_indica_purete)[-1]
  
  # Calcul des totaux et moyennes par colonne
  totaux <- colSums(table_indica_purete[, cols_to_sum], na.rm = TRUE)
  moyennes <- colMeans(table_indica_purete[, cols_to_sum], na.rm = TRUE)
  
  # Création des lignes à ajouter (ligne Total et Moyenne) et ajout de la colonne "chunck_traite"
  ligne_total <- c(chunck_traite = "Total", round(totaux))
  ligne_moyenne <- c(chunck_traite = "Moyenne", round(moyennes))
  
  # Ajout au tableau 
  table_indica_purete <- rbind( 
    table_indica_purete, ligne_total, ligne_moyenne)
  
  # Reconversion des colonnes sauf 'chunck_traite' en numérique
  table_indica_purete[cols_to_sum] <- lapply(table_indica_purete[cols_to_sum], as.numeric)
  
  # On remplace la moyenne de levels_initial par un NA car ça n'a pas de sens
  table_indica_purete[length(resultats_comparaison)+2,2] <- NA
  
  return(table_indica_purete)
}


```

# V) Matrice de confiusion 

```{r}
# Fonction pour créer la matrice de confusion 
matrice_confusion <- function(table_indica_purete, resultats_comparaison){
  # Créer une matrice de confusion vide avec des noms de colonnes
  matrice_confusion_prompt <- data.frame(
      Positifs = c(NA, NA),
      Negatifs = c(NA, NA),
      row.names = c("Positifs_llm", "Negatifs_llm"))
  
  if("prod_transfo_attendus" %in% colnames(table_indica_purete)){
    return(matrice_confusion_prompt)
  }else{
    ###### On remplit la matrice de confusion
    table_indica_purete$nb_prod_transfo_trouves_llm[[length(resultats_comparaison)+1]]
  
    # Etape 1 : Vrais positifs : Les produits transformés trouvés par le llm qui sont des produits transformés 
    matrice_confusion_prompt$Positifs[[1]] <- table_indica_purete$nb_prod_transfo_trouves_llm[[length(resultats_comparaison)+1]]
    
    # Etape 2 : Faux positifs : Les produits transformés trouvés par le llm qui sont des produits bruts
    matrice_confusion_prompt$Negatifs[[1]] <- table_indica_purete$nb_levels_commun[[length(resultats_comparaison)+1]] - table_indica_purete$nb_prod_transfo_trouves_llm[[length(resultats_comparaison)+1]]
    
    # Etape 3 : Vrais négatifs : Les produits bruts trouvés par le llm qui sont des produits bruts 
    matrice_confusion_prompt$Negatifs[[2]] <- table_indica_purete$nb_levels_initial[length(resultats_comparaison)+1] - table_indica_purete$nb_levels_commun[[length(resultats_comparaison)+1]] - table_indica_purete$nb_prod_transfo_pas_trouves_llm[[length(resultats_comparaison)+1]]
    
    # Etape 4 : Faux négatifs : Les produits bruts trouvés par le llm qui sont des produits transformés 
    matrice_confusion_prompt$Positifs[[2]] <-table_indica_purete$nb_prod_transfo_pas_trouves_llm[[length(resultats_comparaison)+1]]
    
    return(matrice_confusion_prompt)
  }
}
```

# VI) Suppresion des levels de produits transformés dans le jeu de données

```{r}
# Fonction de suppresion des levels de produits transformés
retirer_prod_trasfo <- function(data, res_comparaison, stat=TRUE){
  
  # Récupérer toute las liste des produits transformés trouvés par le llm
  liste_prod_transfo_llm <- unlist(lapply(res_comparaison, function(x) x$produit_transfo_llm))
  
  # On vérifie que les levels de produits transformés sont bien uniques
liste_prod_transfo_llm <- unique(liste_prod_transfo_llm)

  # On supprime les produits transformés pour le jeu de données des asperges 
  data_bruts <- data[!(data$productName %in% liste_prod_transfo_llm), ]
  
  # Détails
  if (stat) {
    nb_prod_ini <- length(data_asperge$productName)
    nb_levels_ini <- length(levels(factor(data_asperge$productName)))
  
    nb_levels_retire <- length(liste_prod_transfo_llm)
  
    nb_prod_fin <- length(data_asperge_bruts$productName)
    nb_levels_fin <- length(levels(factor(data_asperge_bruts$productName)))
    
    cat("Nombre de produits initial: ", nb_prod_ini, "levels: ", nb_levels_ini, "\n")
    cat("Nombre de produits retirés:", nb_prod_ini - nb_prod_fin, "levels: ", nb_levels_retire, "\n")
    cat("Nombre de produits final :", nb_prod_fin, "levels: ", nb_levels_fin, "\n")
    
  }
  
  return(data_bruts)
}
```



# VII) Résultats

####  Vérification de l'extraction des résultats du LLM dans une liste

```{r}

# Applique la fonction extraire_liste_produits() à chaque élément de 'res_'
# Cela permet d'extraire, pour chaque réponse du LLM, la liste de produits transformés détectée
vect_verifi_LLM_res_asp_60_1 <- lapply(res_asp_60_1, extraire_liste_produits)


# Vérifie pour quels éléments de res_ l'extraction a échoué (retourne NULL)
# sapply(..., is.null)' renvoie un vecteur logique indiquant quels éléments sont NULL
# which(...)' retourne les indices correspondants. C'est utile pour identifier les cas problématiques # si named integer(0) alors l'extraction a réussi pour tous les éléments de res_
which(sapply(res_asp_60_1, is.null))

```

####  Résutats de la comparaison

```{r}
verite_terrain <- read_excel("levels_asperge.xlsx")

# Exemple d'exécution de la fonction pour les prompts de taille 60 pour les asperges
resultats_comparaison <- comparer_listes_produits(prompts_60_levels_asperge_1, res_asp_60_1)

View(resultats_comparaison)
```

```{r}
### Voir la liste des vrais produits transformés trouver par le modèle
produit_transfo_llm <- unlist(lapply(resultats_comparaison, function(x) x$produit_transfo_llm))

### Voir la liste des produits transformés que le modèle n'a pas réussi à trouver
produits_transfo_pas_trouves <- unlist(lapply(resultats_comparaison, function(x) x$prod_transfo_pas_trouver))

### Voir la liste des produits transformés que le modèle a trouvé mais qui sont en réalité des produits brutes
produits_transfo_trouves_ms_bruts <- if(any(is.na(resultats_comparaison[[1]]$prod_transfo_attendus))){
  rep(NA, length(resultats_comparaison))
}else{unlist(lapply(resultats_comparaison, function(x) setdiff(x$levels_communs, x$prod_transfo_attendus)))}

```

####  Tableau d'indicateurs

```{r}
table_indicateurs <- table_indicateurs_purete(resultats_comparaison)
view(table_indicateurs)
```

####  Matrice de confusion

```{r}
mat_confusion <- matrice_confusion(table_indicateurs, resultats_comparaison)
view(mat_confusion)
```

### Suppresion des levels de produits transformés dans le jeu de données

```{r}
# Importation du jeu de données des asperges
data_asperge <- read_excel("data_asperge.xlsx")

#Suppresion des levels de produits transformés
data_asperge_bruts <- retirer_prod_trasfo(data_asperge, resultats_comparaison)
```

# VIII) Exportations

### Exportation du jeu de données bruts

```{r}
# Exportation du jeu de données bruts pour les asperges 
write_xlsx(data_asperge_bruts,"data_asperge_bruts.xlsx")

```

### Exportation des listes: produits transformés trouvés par le LLM, produits transformés non trouvés et produits considérés comme transformés mais qui sont en réalité des produits bruts 

```{r}
# Export de la liste des vrais produits transformés trouver par le modèle
write_xlsx(produit_transfo_llm,"data_produits_transfo_pas_trouves.xlsx")

# Export de la liste des produits transformés non trouvés par le LLM
write_xlsx(produits_transfo_pas_trouves,"data_produits_transfo_pas_trouves.xlsx")

# Export de la liste des produits transformés que le modèle a trouvé mais qui sont en réalité des produits bruts
write_xlsx(produits_transfo_trouves_ms_bruts,"data_produits_transfo_trouves_ms_bruts.xlsx")
```

### Exportation tableau d'indicateur et matrice de confusion

```{r}

# Export de le tableau d'indicateur
write_xlsx(table_indicateurs,"table_indicateurs_prompt.xlsx")

# Export de la matrice de confusion
write_xlsx(mat_confusion,"matrice_confusion_prompt.xlsx")
```


# Annexes

```{r}
liste_prod_transfo_pas_trouver <- as.data.frame(liste_prod_transfo_pas_trouver)
write_xlsx(liste_prod_transfo_pas_trouver,"liste_prod_transfo_pas_trouver.xlsx")

levels_asperge_2 <- as.data.frame(levels(factor(data_asperge$productName)))
length(levels_asperge_2)
write_xlsx(levels_asperge_2,"levels_asperge_2.xlsx")

y <- list(verite_terrain$levels_asperge)
x <- list(levels_asperge_2)
```


### Vérification de la suppression des produits transformés 

```{r}
###-------------------------------------------


data_asperge_bruts_filtre <- read.table("data_asperge_bruts_filtre.csv", header=TRUE, sep=",", fileEncoding="latin1", check.names =FALSE, stringsAsFactors=TRUE)

length(data_asperge_bruts_filtre$productName)
length(levels(factor(data_asperge_bruts_filtre$productName)))
```

### Récupére des noms de produits

```{r}
recuperer_produits <- function(df, colonne, noms_produits, seuil = NULL, method = "lv") {
  require(stringdist)
  require(stringr)
  
  # Nettoyage basique
  clean_name <- function(x) {
    x <- tolower(x)
    x <- gsub("[^a-z0-9 ]", " ", x)
    x <- gsub("\\s+", " ", x)
    trimws(x) # supprime les espaces en début et en fin
  }
  
  remplacer_caract_speci_regex <- function(mots) {
    # Tu peux adapter cette fonction selon ton besoin
    return(mots)
  }

  noms_df <- df[[colonne]]
  noms_df_clean <- tolower(sapply(noms_df, clean_name))
  noms_produits_clean <- tolower(sapply(noms_produits, clean_name))

  if (is.null(seuil)) {
    # Cas 1 : Matching par combinaison de mots
    result_idx <- sapply(seq_along(noms_df_clean), function(i) {
      produit <- noms_df_clean[i]
      any(sapply(noms_produits_clean, function(ref) {
        mots <- strsplit(ref, "\\s+")[[1]]
        mots <- remplacer_caract_speci_regex(mots)
        pattern <- paste0(".*", paste(mots, collapse = ".*"), ".*")
        grepl(pattern, produit)
      }))
    })
  } else {
    # Cas 2 : Matching basé sur la distance
    result_idx <- sapply(seq_along(noms_df_clean), function(i) {
      produit <- noms_df_clean[i]
      
      tokens <- strsplit(produit, " ")[[1]]
      
      distances <- stringdist::stringdist(tokens, noms_produits_clean, method = method)
      min(distances) <= seuil
    })
  }

  return(df[result_idx, , drop = FALSE])
}

```


```{r}
# Liste de noms de référence
noms_ref <- c("velouté asperge", "crème")
```

```{r}
# sans seuil : combinaison de mots
prod_recup <- recuperer_produits(verite_terrain, colonne = "levels_asperge", noms_produits = noms_ref)
length(prod_recup$levels_asperge)
prod_recup$levels_asperge
```

```{r}
# Avec seuil : distance de Levenshtein ≤ 5
prod_recup2 <- recuperer_produits(verite_terrain, colonne = "levels_asperge", noms_produits = noms_ref, seuil = 4, method = "lv") #0.5 # hamming 2
length(prod_recup2$levels_asperge)
prod_recup2$levels_asperge
```

```{r}

# Exemple de dataframe
df_test <- data.frame(id = 1:3,
                      produit = c("Crème hydratante visage", "Gel douche homme", "Lotion corporelle"))

# Liste de noms de référence
noms_ref <- c("crème visage", "gel douche", "lotion")

# Appel sans seuil : combinaison de mots
df_res_1 <- recuperer_produits(df_test, colonne = "produit", noms_produits = noms_ref)

# Appel avec seuil : distance de Levenshtein ≤ 5
df_res_2 <- recuperer_produits(df_test, colonne = "produit", noms_produits = noms_ref, seuil = 7)


```

```{r}

add_type_prod_fin <- function(df, type_prod_fin, col="productName"){
  df[["ProductType_Fin"]] <- df[[col]]
  
  vrais_noms <- liste_attendue[sapply(liste_attendue, function(p) {
    grepl(pattern, tolower(clean_name(p)))
  })]
  
}
```

