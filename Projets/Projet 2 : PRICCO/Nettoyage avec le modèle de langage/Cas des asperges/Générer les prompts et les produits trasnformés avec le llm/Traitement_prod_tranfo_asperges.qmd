---
title: "Traitement_prod_tranfo_asperges"
format: html
editor: visual
---

# I) Importation des librairies

```{r,message=FALSE}
library("ollamar")

library("tidyverse")
```

# II) Chargement des levels pour asperge

## 1) Levels asperge non permutés

```{r}
levels_asperge <- levels(as.factor(data_asperge$productName))
```

## 2) Levels asperge permutés

```{r}
# Permuter aléatoirement les niveaux
levels_asperge_permutes <- sample(levels_asperge)
```

# II) Trouver les produits transformés avec gemma

## a) Développement de la fonction

```{r}
# On génère les prompts et on applique Gemma dessus
detecter_levels_prod_transfor <- function(nom_prod, levels, nb_chunck, taille_chunck) {
  
  total_levels <- length(levels)

  # Création des chunks de taille `taille_chunck` avec gestion du dernier chunk partiel
  chunks <- split(levels, ceiling(seq_along(levels) / taille_chunck))

  # Nombre total de chunks générés
  total_chunks <- length(chunks)

  # Limiter au nb_chunck demandé, mais sans dÃ©passer ceux disponibles
  chunks <- chunks[1:min(nb_chunck, total_chunks)]

  # Prompt de base (dynamique en fonction du produit)
base_prompt <- paste0(
  "Tu es un expert en alimentation et en classification des produits alimentaires.",
  "Tu reçois une liste de produits à base de ", nom_prod, ". ", 
  "Ta tâche est d’**identifier uniquement les produits transformés** dans cette liste.",
  "---",
  "### \uD83D\uDD36 Définition d’un **produit transformé** :",
  "Un produit est considéré comme **transformé** s’il remplit **au moins un** des critères suivants :",
  "- Il contient **d’autres ingrédients en plus de la ", nom_prod, "** (par exemple : chou, vinaigrette, gingembre, panais, quinoa, etc.)",
  "- Il a subi une **transformation culinaire** (ex. cuit, râpé, assaisonné, mixé, fermenté, stérilisé…)",
  "- Il est présenté ou conditionné comme un **plat préparé** (ex. soupe, purée, tartinade, chips, coleslaw, conserve, plat cuisiné, bocal, barquette, bouteille…)",
  "- Il est destiné à un **usage spécifique** (ex. apéritif, snacking, bébé, mix de crudités, etc.)",
  "---",
  "### ⛔ À l’inverse, un **produit brut** est **non transformé** :",
  "Tu dois **ignorer tous les produits bruts**, même s’ils sont variés ou bio.",  
  "Un produit est brut s’il :",
  "- est uniquement composé de **", nom_prod, "**, sans aucun autre ingrédient",
  "- est présenté sous forme **naturelle** : entière, en botte, en vrac, en sac, lavée ou non, bio ou non, orange, jaune, violette, de différentes variétés",
  "- n’a **subi aucune transformation culinaire**",
  "- ne contient **aucune mention de préparation, de mélange ou de conditionnement culinaire**",
  "\uD83D\uDC49 Exemples de produits **bruts à ignorer** :  ",
  paste0(nom_prod, ", ", nom_prod, " vrac, ", nom_prod, " lavées, ", nom_prod, " bio, ", nom_prod, " en botte, ", nom_prod, " jaune, ", nom_prod, " non lavées, etc."),
  "---",
  "### \uD83D\uDCE4 Ce que tu dois faire :",
  "- **Retourne uniquement** les **noms exacts** des produits transformés de la liste, **copiés tels quels**",
  "- N’ajoute **aucune explication, aucun commentaire**",
  "- Rends la sortie **exclusivement** au format R suivant :",
  "c(\"produit transformé\", \"produit transformé\", \"produit transformé\")",
  "Voici la liste de produits à analyser :"
)



  # Générer les prompts complets en y incorporant les levels
  prompts <- lapply(chunks, function(chunk) {
    paste0(base_prompt,paste(chunk, collapse = "\n"))
    
  })

  # Générer les produits transformés en appelant Gemma3 pour chaque prompt
  # resultats <- lapply(prompts, function(p) {
  #   generate("gemma3", p, stream = FALSE, output = "text")
  # })

  # Résultats des prompts et de Gemma 3
  #return(list(prompts = prompts, resultats = resultats))
  
  # Résultats des prompts
  return(prompts = prompts)
}
```

## 1) Application de la fonction

### a) Pour le vecteur de levels non permuté

```{r}
################# On génère 20 prompts 
prompts_20_levels_asperge_1 <- 
  detecter_levels_prod_transfor(
    "asperge", levels_asperge, nb_chunck = 26,taille_chunck = 20)

# Exemple d'affichage correct 
cat(prompts_20_levels_asperge_1$`25`)

# On sauvegarde les 20 prompts dans un fichier RData
save(prompts_20_levels_asperge_1, file = "prompts_20_levels_asperge_1.RData")

################# On génère 40 prompts 
prompts_40_levels_asperge_1 <- 
  detecter_levels_prod_transfor(
    "asperge", levels_asperge, nb_chunck = 13,taille_chunck = 40)

# Exemple d'affichage correct 
cat(prompts_40_levels_asperge_1$`13`)

# On sauvegarde les 20 prompts dans un fichier RData
save(prompts_40_levels_asperge_1, file = "prompts_40_levels_asperge_1.RData")

################# On génère 60 prompts 
prompts_60_levels_asperge_1 <- 
  detecter_levels_prod_transfor(
    "asperge", levels_asperge, nb_chunck = 9,taille_chunck = 60)

# Exemple d'affichage correct 
cat(prompts_60_levels_asperge_1$`9`)

# On sauvegarde les 20 prompts dans un fichier RData
save(prompts_60_levels_asperge_1, file = "prompts_60_levels_asperge_1.RData")
```

### b) Pour le vecteur de levels permuté

```{r}
################# On génère 20 prompts 
prompts_20_levels_asperge_permutes_2 <- 
  detecter_levels_prod_transfor(
    "asperge", levels_asperge_permutes, nb_chunck = 26,taille_chunck = 20)

# Exemple d'affichage correct 
cat(prompts_20_levels_asperge_permutes_2$`25`)

# On sauvegarde les 20 prompts dans un fichier RData
save(prompts_20_levels_asperge_permutes_2, file = "prompts_20_levels_asperge_permutes_2.RData")

################# On génère 40 prompts 
prompts_40_levels_asperge_permutes_2 <- 
  detecter_levels_prod_transfor(
    "asperge", levels_asperge_permutes, nb_chunck = 13,taille_chunck = 40)

# Exemple d'affichage correct 
cat(prompts_40_levels_asperge_permutes_2$`13`)

# On sauvegarde les 20 prompts dans un fichier RData
save(prompts_40_levels_asperge_permutes_2, file = "prompts_40_levels_asperge_permutes_2.RData")

################# On génère 60 prompts 
prompts_60_levels_asperge_permutes_2 <- 
  detecter_levels_prod_transfor(
    "asperge", levels_asperge_permutes, nb_chunck = 9,taille_chunck = 60)

# Exemple d'affichage correct 
cat(prompts_60_levels_asperge_permutes_2$`9`)

# On sauvegarde les 20 prompts dans un fichier RData
save(prompts_60_levels_asperge_permutes_2, file = "prompts_60_levels_asperge_permutes_2.RData")
```
